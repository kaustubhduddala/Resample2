name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"

env:
  CARGO_TERM_COLOR: always

# Workflow Structure:
# - Each platform (macOS, Windows) independently sets up Python and builds
# - No shared Python setup job - each platform handles its own dependencies
# - Platform-specific Python version detection from setup scripts
# - Automatic release creation when tags are pushed
# - Comprehensive error handling and logging for all build steps
# - Timeout protection (60 minutes) to prevent hanging builds
# - Platform-specific shell usage (bash for macOS, PowerShell for Windows)

jobs:
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Detect Python version for macOS
        id: python-version
        run: |
          echo "Detecting Python version for macOS..."
          if [ -f "src-tauri/resources/setup.sh" ]; then
            PYTHON_VERSION=$(grep -o 'Python 3\.[0-9]\+' src-tauri/resources/setup.sh | head -1 | grep -o '3\.[0-9]\+')
            if [ -n "$PYTHON_VERSION" ]; then
              echo "Detected Python version: $PYTHON_VERSION"
              echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Could not extract Python version, using default 3.11"
              echo "python-version=3.11" >> $GITHUB_OUTPUT
            fi
          else
            echo "setup.sh not found, using default Python 3.11"
            echo "python-version=3.11" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python for macOS
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Build Python environment for macOS
        run: |
          cd src-tauri/resources
          chmod +x setup.sh
          if ! ./setup.sh; then
            echo "❌ Python environment setup failed"
            exit 1
          fi
          echo "✅ Python environment setup completed"

      - name: Build Tauri app for macOS
        run: |
          cd src-tauri
          echo "🔨 Building Rust dependencies..."
          if ! cargo build --release --target ${{ matrix.target }}; then
            echo "❌ Rust build failed"
            exit 1
          fi
          echo "✅ Rust build completed"

          echo "🔨 Building Tauri app..."
          if ! pnpm tauri build --target ${{ matrix.target }}; then
            echo "❌ Tauri build failed"
            exit 1
          fi
          echo "✅ Tauri build completed"

      - name: Create DMG for macOS
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          cd src-tauri/target/aarch64-apple-darwin/release
          if [ ! -d "Resample2.app" ]; then
            echo "❌ Resample2.app not found"
            exit 1
          fi
          echo "📦 Creating macOS ARM64 archive..."
          if ! zip -r resample-macos-arm64.zip Resample2.app; then
            echo "❌ Failed to create archive"
            exit 1
          fi
          echo "✅ macOS ARM64 archive created"

      - name: Create ZIP for macOS Intel
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          cd src-tauri/target/x86_64-apple-darwin/release
          if [ ! -d "Resample2.app" ]; then
            echo "❌ Resample2.app not found"
            exit 1
          fi
          echo "📦 Creating macOS Intel archive..."
          if ! zip -r resample-macos-x64.zip Resample2.app; then
            echo "❌ Failed to create archive"
            exit 1
          fi
          echo "✅ macOS Intel archive created"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/*.zip
            src-tauri/target/${{ matrix.target }}/release/*.app

  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_DIR=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_DIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Detect Python version for Windows
        id: python-version
        shell: pwsh
        run: |
          Write-Host "Detecting Python version for Windows..."
          if (Test-Path "src-tauri/resources/setup.bat") {
            $content = Get-Content "src-tauri/resources/setup.bat" -Raw
            if ($content -match 'Python 3\.(\d+)') {
              $PYTHON_VERSION = "3.$($matches[1])"
              Write-Host "Detected Python version: $PYTHON_VERSION"
              Write-Host "python-version=$PYTHON_VERSION" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "Could not extract Python version, using default 3.11"
              Write-Host "python-version=3.11" >> $env:GITHUB_OUTPUT
            }
          } else {
            Write-Host "setup.bat not found, using default Python 3.11"
            Write-Host "python-version=3.11" >> $env:GITHUB_OUTPUT
          }

      - name: Setup Python for Windows
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Build Python environment for Windows
        run: |
          cd src-tauri/resources
          if ! setup.bat; then
            echo "❌ Python environment setup failed"
            exit 1
          fi
          echo "✅ Python environment setup completed"

      - name: Build Tauri app for Windows
        run: |
          cd src-tauri
          echo "🔨 Building Rust dependencies..."
          if (! cargo build --release --target ${{ matrix.target }}) {
            echo "❌ Rust build failed"
            exit 1
          }
          echo "✅ Rust build completed"

          echo "🔨 Building Tauri app..."
          if (! pnpm tauri build --target ${{ matrix.target }}) {
            echo "❌ Tauri build failed"
            exit 1
          }
          echo "✅ Tauri build completed"

      - name: Create Windows installer
        shell: pwsh
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          if (-not (Test-Path "Resample2.exe")) {
            Write-Host "❌ Resample2.exe not found"
            exit 1
          }
          Write-Host "📦 Creating Windows archive..."
          try {
            Compress-Archive -Path "Resample2.exe" -DestinationPath "resample-windows-x64.zip" -Force
            Write-Host "✅ Windows archive created"
          } catch {
            Write-Host "❌ Failed to create archive: $_"
            exit 1
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/*.zip
            src-tauri/target/${{ matrix.target }}/release/*.exe

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Resample ${{ steps.get_version.outputs.version }}

            ### Downloads

            **macOS:**
            - Apple Silicon (ARM64): `resample-macos-arm64.zip`
            - Intel (x64): `resample-macos-x64.zip`

            **Windows:**
            - x64: `resample-windows-x64.zip`

            ### Installation

            1. Download the appropriate file for your platform
            2. Extract the archive
            3. Run the application

            ### Changes

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          files: |
            macos-aarch64-apple-darwin/*.zip
            macos-x86_64-apple-darwin/*.zip
            windows-x86_64-pc-windows-msvc/*.zip
          draft: false
          prerelease: false

  build-venv-packages:
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build macOS virtual environment package
        run: |
          cd src-tauri/resources
          python -m venv .venv-mac
          source .venv-mac/bin/activate
          pip install -r requirements-mac.txt
          pip install --upgrade pip

          # Create a portable package
          cd .venv-mac
          tar -czf ../../macos-venv.tar.gz .
          cd ..

      - name: Build Windows virtual environment package
        run: |
          cd src-tauri/resources
          python -m venv .venv-win
          source .venv-win/bin/activate
          pip install -r requirements-win.txt
          pip install --upgrade pip

          # Create a portable package
          cd .venv-win
          tar -czf ../../windows-venv.tar.gz .
          cd ..

      - name: Upload virtual environment packages
        uses: actions/upload-artifact@v4
        with:
          name: virtual-environments
          path: |
            macos-venv.tar.gz
            windows-venv.tar.gz
          retention-days: 30
